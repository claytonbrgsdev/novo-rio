/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/whatsapp/message": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Whatsapp Message Endpoint
         * @description Endpoint WhatsApp: registra ação ou ferramenta.
         */
        post: operations["whatsapp_message_endpoint_whatsapp_message_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/players/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Players
         * @description Retrieves a list of players with pagination.
         *
         *     Example response:
         *     ```json
         *     [{ "id": 1, "name": "Alice", "balance": 0.0 }]
         *     ```
         */
        get: operations["list_players_players__get"];
        put?: never;
        /**
         * Create Player
         * @description Creates a new player.
         *
         *     Example request:
         *     ```json
         *     { "name": "Alice", "balance": 0.0 }
         *     ```
         *     Example response:
         *     ```json
         *     { "id": 1, "name": "Alice", "balance": 0.0 }
         *     ```
         */
        post: operations["create_player_endpoint_players__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/players/{player_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Player
         * @description Retrieves a single player by its ID.
         *
         *     Example path: `/players/1`
         *     Example response:
         *     ```json
         *     { "id": 1, "name": "Alice", "balance": 0.0 }
         *     ```
         */
        get: operations["get_player_endpoint_players__player_id__get"];
        /**
         * Update Player
         * @description Updates player information.
         *
         *     Example request:
         *     ```json
         *     { "name": "Bob" }
         *     ```
         */
        put: operations["update_player_endpoint_players__player_id__put"];
        post?: never;
        /**
         * Delete Player
         * @description Deletes a player by ID.
         */
        delete: operations["delete_player_endpoint_players__player_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/players/{player_id}/terrains": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Player's Terrains
         * @description Retrieves all terrains owned by a specific player.
         *
         *     Example path: `/players/1/terrains`
         *     Example response:
         *     ```json
         *     [{ "id": 1, "player_id": 1, "name": "Forest Lot" }]
         *     ```
         */
        get: operations["get_player_terrains_players__player_id__terrains_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/players/{player_id}/with-terrains": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Player with Terrains
         * @description Retrieves a player along with all their terrains in a single response.
         *
         *     Example path: `/players/1/with-terrains`
         */
        get: operations["get_player_with_terrains_players__player_id__with_terrains_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/terrains/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Terrains
         * @description Retrieves a list of terrains with pagination.
         */
        get: operations["list_terrains_terrains__get"];
        put?: never;
        /**
         * Create Terrain
         * @description Creates a new terrain for a player.
         *
         *     Example request:
         *     ```json
         *     { "player_id": 1, "name": "Forest", "x_coordinate": 1.0, "y_coordinate": 2.0, "access_type": "pub" }
         *     ```
         */
        post: operations["create_terrain_endpoint_terrains__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/terrains/{terrain_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Terrain
         * @description Retrieves a terrain by its ID.
         */
        get: operations["get_terrain_endpoint_terrains__terrain_id__get"];
        /**
         * Update Terrain
         * @description Updates terrain fields.
         *
         *     Example request:
         *     ```json
         *     { "name": "NewForest" }
         *     ```
         */
        put: operations["update_terrain_endpoint_terrains__terrain_id__put"];
        post?: never;
        /**
         * Delete Terrain
         * @description Deletes a terrain by its ID.
         */
        delete: operations["delete_terrain_endpoint_terrains__terrain_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/terrains/{terrain_id}/soil-health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Soil Health Index
         * @description Retorna um relatório de saúde do solo para o terreno, incluindo índice de saúde, categoria e alertas.
         */
        get: operations["get_soil_health_endpoint_terrains__terrain_id__soil_health_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/terrains/{terrain_id}/parameters-with-health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Terrain Parameters with Health Report
         * @description Retorna os parâmetros do terreno junto com o relatório de saúde do solo.
         */
        get: operations["get_terrain_params_with_health_terrains__terrain_id__parameters_with_health_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/badges/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Badges
         * @description Retrieves all badges for a given player ID.
         *
         *     Example path: `/badges?player_id=1`
         *     Example response:
         *     ```json
         *     [{ "id": 1, "player_id": 1, "action_name": "FirstPlant", "timestamp": "2025-04-20T13:00:00" }]
         *     ```
         */
        get: operations["list_badges_badges__get"];
        put?: never;
        /**
         * Create Badge
         * @description Grants a badge to a player.
         *
         *     Example request:
         *     ```json
         *     { "player_id": 1, "type": "FirstPlant" }
         *     ```
         */
        post: operations["create_badge_endpoint_badges__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/climate-conditions/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Climate Conditions
         * @description Retrieves a list of climate conditions with pagination.
         *
         *     Example response:
         *     ```json
         *     [{ "id": 1, "condition": "rain", "intensity": "high", "timestamp": "2025-04-20T13:24:00" }]
         *     ```
         */
        get: operations["list_climate_conditions_climate_conditions__get"];
        put?: never;
        /**
         * Create Climate Condition
         * @description Creates a new climate condition.
         *
         *     Example request:
         *     ```json
         *     { "condition": "rain", "intensity": "high" }
         *     ```
         *     Example response:
         *     ```json
         *     { "id": 1, "condition": "rain", "intensity": "high", "timestamp": "2025-04-20T13:24:00" }
         *     ```
         */
        post: operations["create_climate_condition_endpoint_climate_conditions__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/shop-items/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Shop Items
         * @description Retrieves a list of shop items with pagination.
         *
         *     Example response:
         *     ```json
         *     [{ "id": 1, "name": "Seed", "price": 10.0 }]
         *     ```
         */
        get: operations["list_shop_items_shop_items__get"];
        put?: never;
        /**
         * Create Shop Item
         * @description Creates a new shop item.
         *
         *     Example request:
         *     ```json
         *     { "name": "Seed", "description": "Test seed", "price": 10.0 }
         *     ```
         *     Example response:
         *     ```json
         *     { "id": 1, "name": "Seed", "description": "Test seed", "price": 10.0 }
         *     ```
         */
        post: operations["create_shop_item_endpoint_shop_items__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/shop-items/{item_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Shop Item
         * @description Retrieves a shop item by its ID.
         *
         *     Example path: `/shop-items/1`
         *     Example response:
         *     ```json
         *     { "id": 1, "name": "Seed", "price": 10.0 }
         *     ```
         */
        get: operations["get_shop_item_endpoint_shop_items__item_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/purchases/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Purchases
         * @description Retrieves a list of purchases with pagination.
         *
         *     Example response:
         *     ```json
         *     [{ "id": 1, "player_id": 1, "item_id": 2, "quantity": 3, "total_price": 30.0 }]
         *     ```
         */
        get: operations["list_purchases_purchases__get"];
        put?: never;
        /**
         * Create Purchase
         * @description Creates a new purchase and debits player balance.
         *
         *     Example request:
         *     ```json
         *     { "player_id": 1, "item_id": 2, "quantity": 3 }
         *     ```
         *     Example response:
         *     ```json
         *     { "id": 1, "player_id": 1, "item_id": 2, "quantity": 3, "total_price": 30.0 }
         *     ```
         */
        post: operations["create_purchase_endpoint_purchases__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/purchases/{purchase_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Purchase
         * @description Retrieves a single purchase by its ID.
         *
         *     Example path: `/purchases/1`
         *     Example response:
         *     ```json
         *     { "id": 1, "player_id": 1, "item_id": 2, "quantity": 3, "total_price": 30.0 }
         *     ```
         */
        get: operations["get_purchase_endpoint_purchases__purchase_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/async/shop-items/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Shop Items Async */
        get: operations["list_shop_items_async_async_shop_items__get"];
        put?: never;
        /** Create Shop Item Async Endpoint */
        post: operations["create_shop_item_async_endpoint_async_shop_items__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/async/shop-items/{item_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Shop Item Async Endpoint */
        get: operations["get_shop_item_async_endpoint_async_shop_items__item_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/async/purchases/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Purchases Async */
        get: operations["list_purchases_async_async_purchases__get"];
        put?: never;
        /** Create Purchase Async Endpoint */
        post: operations["create_purchase_async_endpoint_async_purchases__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/async/purchases/{purchase_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Purchase Async Endpoint */
        get: operations["get_purchase_async_endpoint_async_purchases__purchase_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/async/terrains/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Terrains Async */
        get: operations["list_terrains_async_async_terrains__get"];
        put?: never;
        /** Create Terrain Async Endpoint */
        post: operations["create_terrain_async_endpoint_async_terrains__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/async/terrains/{terrain_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Terrain Async Endpoint */
        get: operations["get_terrain_async_endpoint_async_terrains__terrain_id__get"];
        /** Update Terrain Async Endpoint */
        put: operations["update_terrain_async_endpoint_async_terrains__terrain_id__put"];
        post?: never;
        /** Delete Terrain Async Endpoint */
        delete: operations["delete_terrain_async_endpoint_async_terrains__terrain_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/async/terrains/{terrain_id}/soil-health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Soil Health Index
         * @description Retorna um relatório de saúde do solo para o terreno, incluindo índice de saúde, categoria e alertas.
         */
        get: operations["get_soil_health_async_endpoint_async_terrains__terrain_id__soil_health_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/async/terrains/{terrain_id}/parameters-with-health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Terrain Parameters with Health Report
         * @description Retorna os parâmetros do terreno junto com o relatório de saúde do solo.
         */
        get: operations["get_terrain_params_with_health_async_async_terrains__terrain_id__parameters_with_health_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/async/players/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Players (async)
         * @description Asynchronously retrieves players with pagination.
         *
         *     Example response:
         *     ```json
         *     [{ "id": 1, "name": "Alice", "balance": 0.0 }]
         *     ```
         */
        get: operations["list_players_endpoint_async_players__get"];
        put?: never;
        /**
         * Create Player (async)
         * @description Asynchronously creates a new player.
         *
         *     Example request:
         *     ```json
         *     { "name": "Alice", "balance": 0.0 }
         *     ```
         *     Example response:
         *     ```json
         *     { "id": 1, "name": "Alice", "balance": 0.0 }
         *     ```
         */
        post: operations["create_player_endpoint_async_players__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/async/players/{player_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Player (async)
         * @description Asynchronously fetches a player by ID.
         *
         *     Example path: `/async/players/1`
         *     Example response:
         *     ```json
         *     { "id": 1, "name": "Alice", "balance": 0.0 }
         *     ```
         */
        get: operations["get_player_endpoint_async_players__player_id__get"];
        /**
         * Update Player (async)
         * @description Asynchronously updates a player record.
         *
         *     Example request:
         *     ```json
         *     { "name": "Bob" }
         *     ```
         */
        put: operations["update_player_endpoint_async_players__player_id__put"];
        post?: never;
        /**
         * Delete Player (async)
         * @description Asynchronously deletes a player by ID.
         */
        delete: operations["delete_player_endpoint_async_players__player_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/async/players/{player_id}/terrains": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Player's Terrains (async)
         * @description Asynchronously retrieves all terrains owned by a specific player.
         *
         *     Example path: `/async/players/1/terrains`
         *     Example response:
         *     ```json
         *     [{ "id": 1, "player_id": 1, "name": "Forest Lot" }]
         *     ```
         */
        get: operations["get_player_terrains_async_players__player_id__terrains_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/async/players/{player_id}/with-terrains": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Player with Terrains (async)
         * @description Asynchronously retrieves a player along with all their terrains in a single response.
         *
         *     Example path: `/async/players/1/with-terrains`
         */
        get: operations["get_player_with_terrains_async_players__player_id__with_terrains_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/async/agents/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Agents Async
         * @description Stub endpoint: retorna lista de agentes por quadrante do terreno,
         *     gerando dados aleatórios para demonstração.
         */
        get: operations["list_agents_async_async_agents__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/async/climate-conditions/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Climate Conditions (async)
         * @description Asynchronously retrieves climate conditions with pagination.
         *
         *     Example response:
         *     ```json
         *     [{ "id": 1, "condition": "rain", "intensity": "high", "timestamp": "2025-04-20T13:24:00" }]
         *     ```
         */
        get: operations["list_climate_conditions_endpoint_async_climate_conditions__get"];
        put?: never;
        /**
         * Create Climate Condition (async)
         * @description Asynchronously creates a new climate condition record.
         *
         *     Example request:
         *     ```json
         *     { "condition": "rain", "intensity": "high" }
         *     ```
         *     Example response:
         *     ```json
         *     { "id": 1, "condition": "rain", "intensity": "high", "timestamp": "2025-04-20T13:24:00" }
         *     ```
         */
        post: operations["create_climate_condition_endpoint_async_climate_conditions__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/async/badges/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Badges Endpoint
         * @description Endpoint para listar badges de um jogador
         */
        get: operations["list_badges_endpoint_async_badges__get"];
        put?: never;
        /**
         * Create Badge Endpoint
         * @description Endpoint para criar badge
         */
        post: operations["create_badge_endpoint_async_badges__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/eko/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Proxy de chat Eko
         * @description Recebe mensagens, adiciona contexto de conversa via Redis e encaminha para o LLM.
         *     Exemplo de payload:
         *     ```json
         *     { "model": "test", "messages": [{ "role": "player", "content": "Oi" }], "stream": false, "conversation_id": "conv1" }
         *     ```
         *     Exemplo de resposta:
         *     ```json
         *     { "choices": [{ "message": { "role": "eko", "content": "Hello" } }] }
         *     ```
         */
        post: operations["chat_proxy_eko__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/eko/{conversation_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Limpar contexto de conversa
         * @description Deleta todo o histórico de conversa no Redis para o conversation_id especificado.
         *
         *     Exemplo de uso:
         *     DELETE /eko/conv1
         *     Resposta:
         *     { "status": "cleared" }
         */
        delete: operations["clear_context_eko__conversation_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/plantings/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Plantings
         * @description List plantings with optional filters for player or quadrant
         */
        get: operations["list_plantings_plantings__get"];
        put?: never;
        /**
         * Create Planting
         * @description Create a new planting in a specific slot within a quadrant.
         *
         *     Example request:
         *     ```json
         *     { "player_id": 1, "quadrant_id": 3, "slot_index": 5, "species_id": 2 }
         *     ```
         */
        post: operations["create_planting_endpoint_plantings__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/plantings/{planting_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Planting
         * @description Get a planting by ID
         */
        get: operations["get_planting_endpoint_plantings__planting_id__get"];
        /**
         * Update Planting
         * @description Update an existing planting
         */
        put: operations["update_planting_endpoint_plantings__planting_id__put"];
        post?: never;
        /**
         * Delete Planting
         * @description Delete a planting
         */
        delete: operations["delete_planting_endpoint_plantings__planting_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/species/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Species
         * @description Retorna todos os parâmetros das espécies configuradas em species.yml
         */
        get: operations["list_species_species__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tools/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Tools
         * @description Lista ferramentas, com paginação.
         */
        get: operations["list_tools_tools__get"];
        put?: never;
        /**
         * Create Tool Endpoint
         * @description Cria uma nova ferramenta.
         */
        post: operations["create_tool_endpoint_tools__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tools/{tool_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Tool Endpoint
         * @description Retorna uma ferramenta por ID.
         */
        get: operations["get_tool_endpoint_tools__tool_id__get"];
        /**
         * Update Tool Endpoint
         * @description Atualiza uma ferramenta existente.
         */
        put: operations["update_tool_endpoint_tools__tool_id__put"];
        post?: never;
        /**
         * Delete Tool Endpoint
         * @description Remove uma ferramenta.
         */
        delete: operations["delete_tool_endpoint_tools__tool_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/run-tick": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Executa um tick manual para plantas
         * @description Executa manualmente o tick de plantas.
         */
        post: operations["run_tick_admin_run_tick_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/actions/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Perform Action */
        post: operations["perform_action_actions__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/async/actions/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Perform Action Async */
        post: operations["perform_action_async_async_actions__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/quadrants/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Quadrants
         * @description Retrieves a list of quadrants for a specific terrain with pagination.
         */
        get: operations["list_quadrants_quadrants__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/quadrants/{quadrant_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Quadrant
         * @description Retrieves a quadrant by its ID.
         */
        get: operations["get_quadrant_endpoint_quadrants__quadrant_id__get"];
        /**
         * Update Quadrant
         * @description Updates quadrant fields.
         */
        put: operations["update_quadrant_endpoint_quadrants__quadrant_id__put"];
        post?: never;
        /**
         * Delete Quadrant
         * @description Deletes a quadrant by its ID.
         */
        delete: operations["delete_quadrant_endpoint_quadrants__quadrant_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/async/quadrants/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Quadrants Async
         * @description Returns a list of quadrants for a terrain.
         */
        get: operations["list_quadrants_async_async_quadrants__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/async/quadrants/{quadrant_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Quadrant Async Endpoint
         * @description Fetches a quadrant by ID.
         */
        get: operations["get_quadrant_async_endpoint_async_quadrants__quadrant_id__get"];
        /**
         * Update Quadrant Async Endpoint
         * @description Updates an existing quadrant.
         */
        put: operations["update_quadrant_async_endpoint_async_quadrants__quadrant_id__put"];
        post?: never;
        /**
         * Delete Quadrant Async Endpoint
         * @description Deletes a quadrant record.
         */
        delete: operations["delete_quadrant_async_endpoint_async_quadrants__quadrant_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/async/plantings/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Plantings Async
         * @description List plantings with optional filters for player or quadrant (async)
         */
        get: operations["list_plantings_async_async_plantings__get"];
        put?: never;
        /**
         * Create Planting Async Endpoint
         * @description Create a new planting in a specific slot within a quadrant (async)
         */
        post: operations["create_planting_async_endpoint_async_plantings__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/async/plantings/{planting_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Planting Async Endpoint
         * @description Get a planting by ID (async)
         */
        get: operations["get_planting_async_endpoint_async_plantings__planting_id__get"];
        /**
         * Update Planting Async Endpoint
         * @description Update an existing planting (async)
         */
        put: operations["update_planting_async_endpoint_async_plantings__planting_id__put"];
        post?: never;
        /**
         * Delete Planting Async Endpoint
         * @description Delete a planting (async)
         */
        delete: operations["delete_planting_async_endpoint_async_plantings__planting_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/inputs/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get inputs for a planting
         * @description Retrieve a list of inputs applied to plantings.
         *
         *     - If **planting_id** is provided, returns inputs for that specific planting
         *     - Otherwise, returns all inputs
         */
        get: operations["get_inputs_endpoint_inputs__get"];
        put?: never;
        /**
         * Apply an input/resource to a planting
         * @description Apply an agricultural input/resource (water, fertilizer, compost, etc.) to a planting.
         *
         *     - **planting_id**: ID of the planting to apply the input to
         *     - **type**: Type of input (água, fertilizante, composto, etc.)
         *     - **quantity**: Amount of the input applied
         *
         *     Returns complete details about the input and its effects on soil parameters and plant attributes.
         */
        post: operations["create_input_endpoint_inputs__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/inputs/{input_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a specific input
         * @description Retrieve details of a specific input by its ID.
         */
        get: operations["get_input_endpoint_inputs__input_id__get"];
        put?: never;
        post?: never;
        /**
         * Delete an input
         * @description Delete an input by its ID.
         */
        delete: operations["delete_input_endpoint_inputs__input_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/async/inputs/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get inputs for a planting
         * @description Retrieve a list of inputs applied to plantings.
         *
         *     - If **planting_id** is provided, returns inputs for that specific planting
         *     - Otherwise, returns all inputs
         */
        get: operations["get_inputs_endpoint_async_inputs__get"];
        put?: never;
        /**
         * Apply an input/resource to a planting
         * @description Apply an agricultural input/resource (water, fertilizer, compost, etc.) to a planting.
         *
         *     - **planting_id**: ID of the planting to apply the input to
         *     - **type**: Type of input (água, fertilizante, composto, etc.)
         *     - **quantity**: Amount of the input applied
         *
         *     Returns complete details about the input and its effects on soil parameters and plant attributes.
         */
        post: operations["create_input_endpoint_async_inputs__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/async/inputs/{input_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a specific input
         * @description Retrieve details of a specific input by its ID.
         */
        get: operations["get_input_endpoint_async_inputs__input_id__get"];
        put?: never;
        post?: never;
        /**
         * Delete an input
         * @description Delete an input by its ID.
         */
        delete: operations["delete_input_endpoint_async_inputs__input_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Root */
        get: operations["root__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** BadgeCreate */
        BadgeCreate: {
            /** Name */
            name: string;
            /** Description */
            description?: string;
            /** Player Id */
            player_id: number;
        };
        /** BadgeOut */
        BadgeOut: {
            /** Name */
            name: string;
            /** Description */
            description?: string;
            /** Id */
            id: number;
            /** Player Id */
            player_id: number;
            /**
             * Awarded At
             * Format: date-time
             */
            awarded_at: string;
        };
        /** ChatChoice */
        ChatChoice: {
            message: components["schemas"]["ChatMessage"];
        };
        /** ChatMessage */
        ChatMessage: {
            /** Role */
            role: string;
            /** Content */
            content: string;
        };
        /** ChatRequest */
        ChatRequest: {
            /**
             * Model
             * @default llama3.1:8b
             */
            model: string;
            /** Messages */
            messages: components["schemas"]["ChatMessage"][];
            /** Conversation Id */
            conversation_id?: string;
            /**
             * Stream
             * @default false
             */
            stream: boolean;
        };
        /** ChatResponse */
        ChatResponse: {
            /** Choices */
            choices: components["schemas"]["ChatChoice"][];
        };
        /** ClimateConditionCreate */
        ClimateConditionCreate: {
            /** Name */
            name: string;
            /** Description */
            description?: string;
        };
        /** ClimateConditionOut */
        ClimateConditionOut: {
            /** Name */
            name: string;
            /** Description */
            description?: string;
            /** Id */
            id: number;
            /**
             * Timestamp
             * Format: date-time
             */
            timestamp: string;
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /**
         * InputCreate
         * @description Schema for creating a new input/resource.
         */
        InputCreate: {
            /** Type */
            type: string;
            /** Quantity */
            quantity: number;
            /** Planting Id */
            planting_id: number;
        };
        /**
         * InputOut
         * @description Schema for returning input/resource data.
         */
        InputOut: {
            /** Type */
            type: string;
            /** Quantity */
            quantity: number;
            /** Id */
            id: number;
            /** Planting Id */
            planting_id: number;
            /**
             * Applied At
             * Format: date-time
             */
            applied_at: string;
        };
        /**
         * InputWithEffectsOut
         * @description Schema for returning input/resource data with its effects on soil parameters.
         */
        InputWithEffectsOut: {
            /** Type */
            type: string;
            /** Quantity */
            quantity: number;
            /** Id */
            id: number;
            /** Planting Id */
            planting_id: number;
            /**
             * Applied At
             * Format: date-time
             */
            applied_at: string;
            /**
             * Effects
             * @description Efeitos do insumo nos parâmetros do solo e da planta
             * @default []
             */
            effects: components["schemas"]["ParameterEffect"][];
            /**
             * Terrain Id
             * @description ID do terreno onde o insumo foi aplicado
             */
            terrain_id?: number;
            /**
             * Quadrant Id
             * @description ID do quadrante onde o insumo foi aplicado
             */
            quadrant_id?: number;
            /**
             * Plant Effects
             * @description Efeitos do insumo na planta (por exemplo, days_sem_rega)
             */
            plant_effects?: Record<string, never>;
        };
        /**
         * ParameterEffect
         * @description Schema for representing the effect on a parameter.
         */
        ParameterEffect: {
            /**
             * Parameter
             * @description Nome do parâmetro afetado
             */
            parameter: string;
            /**
             * Before
             * @description Valor antes da aplicação do insumo
             */
            before: number;
            /**
             * After
             * @description Valor após a aplicação do insumo
             */
            after: number;
            /**
             * Change
             * @description Diferença entre os valores antes e depois
             */
            change: number;
        };
        /**
         * PlantingCreate
         * @description Schema for creating plantings
         */
        PlantingCreate: {
            /** Species Id */
            species_id: number;
            /** Player Id */
            player_id: number;
            /** Quadrant Id */
            quadrant_id: number;
            /** Slot Index */
            slot_index: number;
        };
        /**
         * PlantingSchema
         * @description Schema for returning plantings
         */
        PlantingSchema: {
            /** Species Id */
            species_id: number;
            /** Player Id */
            player_id: number;
            /** Quadrant Id */
            quadrant_id: number;
            /** Slot Index */
            slot_index: number;
            /** Id */
            id: number;
            /**
             * Planted At
             * Format: date-time
             */
            planted_at: string;
            /** Current State */
            current_state: string;
            /** Days Since Planting */
            days_since_planting: number;
            /** Days Sem Rega */
            days_sem_rega: number;
        };
        /**
         * PlantingUpdate
         * @description Schema for updating plantings
         */
        PlantingUpdate: {
            /** Species Id */
            species_id?: number;
            /** Current State */
            current_state?: string;
            /** Days Since Planting */
            days_since_planting?: number;
            /** Days Sem Rega */
            days_sem_rega?: number;
        };
        /** PlayerCreate */
        PlayerCreate: {
            /** Name */
            name: string;
            /**
             * Balance
             * @default 0
             */
            balance: number;
            /**
             * Aura
             * @default 100
             */
            aura: number;
        };
        /** PlayerOut */
        PlayerOut: {
            /** Name */
            name: string;
            /** Balance */
            balance: number;
            /** Aura */
            aura: number;
            /** Id */
            id: number;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at?: string;
        };
        /** PlayerUpdate */
        PlayerUpdate: {
            /** Name */
            name?: string;
            /** Aura */
            aura?: number;
        };
        /** PlayerWithTerrainsOut */
        PlayerWithTerrainsOut: {
            /** Name */
            name: string;
            /** Balance */
            balance: number;
            /** Aura */
            aura: number;
            /** Id */
            id: number;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at?: string;
            /**
             * Terrains
             * @default []
             */
            terrains: components["schemas"]["TerrainOut"][];
        };
        /** PurchaseCreate */
        PurchaseCreate: {
            /** Player Id */
            player_id: number;
            /** Shop Item Id */
            shop_item_id: number;
            /**
             * Quantity
             * @default 1
             */
            quantity: number;
        };
        /** PurchaseOut */
        PurchaseOut: {
            /** Player Id */
            player_id: number;
            /** Shop Item Id */
            shop_item_id: number;
            /**
             * Quantity
             * @default 1
             */
            quantity: number;
            /** Id */
            id: number;
            /** Total Price */
            total_price: number;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
        };
        /**
         * QuadrantOut
         * @description Schema for returning a Quadrant
         */
        QuadrantOut: {
            /** Terrain Id */
            terrain_id: number;
            /** Label */
            label: string;
            /** Id */
            id: number;
            /** Soil Moisture */
            soil_moisture: number;
            /** Fertility */
            fertility: number;
            /** Coverage */
            coverage: number;
            /** Organic Matter */
            organic_matter: number;
            /** Compaction */
            compaction: number;
            /** Biodiversity */
            biodiversity: number;
        };
        /**
         * QuadrantUpdate
         * @description Schema for updating a Quadrant
         */
        QuadrantUpdate: {
            /** Label */
            label?: string;
            /** Soil Moisture */
            soil_moisture?: number;
            /** Fertility */
            fertility?: number;
            /** Coverage */
            coverage?: number;
            /** Organic Matter */
            organic_matter?: number;
            /** Compaction */
            compaction?: number;
            /** Biodiversity */
            biodiversity?: number;
        };
        /** ShopItemCreate */
        ShopItemCreate: {
            /** Name */
            name: string;
            /** Description */
            description?: string;
            /** Price */
            price: number;
        };
        /** ShopItemOut */
        ShopItemOut: {
            /** Name */
            name: string;
            /** Description */
            description?: string;
            /** Price */
            price: number;
            /** Id */
            id: number;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
        };
        /**
         * SoilAlert
         * @description Representa um alerta sobre um parâmetro do solo
         */
        SoilAlert: {
            /** Parameter */
            parameter: string;
            /** Display Name */
            display_name: string;
            /** Value */
            value: number;
            /** Ideal Range */
            ideal_range: (number)[];
            /** Severity */
            severity: string;
            /** Message */
            message: string;
        };
        /**
         * SoilHealthReport
         * @description Relatório completo de saúde do solo
         * @example {
         *       "health_index": 78.5,
         *       "health_category": "Muito Bom",
         *       "alerts": [
         *         {
         *           "parameter": "soil_moisture",
         *           "display_name": "Umidade do Solo",
         *           "value": 15,
         *           "ideal_range": [
         *             30,
         *             70
         *           ],
         *           "severity": "alerta",
         *           "message": "Umidade do Solo está muito baixo (15.0)"
         *         }
         *       ],
         *       "recommendations": [
         *         "Aplicar água para aumentar a umidade do solo"
         *       ]
         *     }
         */
        SoilHealthReport: {
            /** Health Index */
            health_index: number;
            /** Health Category */
            health_category: string;
            /** Alerts */
            alerts: components["schemas"]["SoilAlert"][];
            /** Recommendations */
            recommendations: string[];
        };
        /** SpeciesSchema */
        SpeciesSchema: {
            /** Common Name */
            common_name: string;
            /** Germinacao Dias */
            germinacao_dias: number;
            /** Maturidade Dias */
            maturidade_dias: number;
            /** Agua Diaria Min */
            agua_diaria_min: number;
            /** Espaco M2 */
            espaco_m2: number;
            /** Rendimento Unid */
            rendimento_unid: number;
            /** Tolerancia Seca */
            tolerancia_seca: string;
            /** Germinacao Dias Scaled */
            germinacao_dias_scaled: number;
            /** Maturidade Dias Scaled */
            maturidade_dias_scaled: number;
        };
        /** TerrainCreate */
        TerrainCreate: {
            /** Player Id */
            player_id: number;
            /** Name */
            name?: string;
            /** X Coordinate */
            x_coordinate?: number;
            /** Y Coordinate */
            y_coordinate?: number;
            /** Access Type */
            access_type?: string;
        };
        /** TerrainOut */
        TerrainOut: {
            /** Player Id */
            player_id: number;
            /** Name */
            name?: string;
            /** X Coordinate */
            x_coordinate?: number;
            /** Y Coordinate */
            y_coordinate?: number;
            /** Access Type */
            access_type?: string;
            /** Id */
            id: number;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at?: string;
        };
        /**
         * TerrainParametersWithHealthOut
         * @description Schema para retornar TerrainParameters com relatório de saúde do solo
         */
        TerrainParametersWithHealthOut: {
            /** Terrain Id */
            terrain_id: number;
            /**
             * Coverage
             * @default 0
             */
            coverage: number;
            /**
             * Regeneration Cycles
             * @default 0
             */
            regeneration_cycles: number;
            /** Id */
            id: number;
            /**
             * Soil Moisture
             * @default 0
             */
            soil_moisture: number;
            /**
             * Fertility
             * @default 0
             */
            fertility: number;
            /**
             * Soil Ph
             * @default 7
             */
            soil_ph: number;
            /**
             * Organic Matter
             * @default 0
             */
            organic_matter: number;
            /**
             * Compaction
             * @default 0
             */
            compaction: number;
            /**
             * Biodiversity
             * @default 0
             */
            biodiversity: number;
            /**
             * Spontaneous Species Count
             * @default 0
             */
            spontaneous_species_count: number;
            health_report: components["schemas"]["SoilHealthReport"];
        };
        /** TerrainUpdate */
        TerrainUpdate: {
            /** Name */
            name?: string;
            /** X Coordinate */
            x_coordinate?: number;
            /** Y Coordinate */
            y_coordinate?: number;
            /** Access Type */
            access_type?: string;
        };
        /** ToolCreate */
        ToolCreate: {
            /** Common Name */
            common_name: string;
            /** Key */
            key: string;
            /** Description */
            description: string;
            /** Task Type */
            task_type: string;
            /** Efficiency */
            efficiency: number;
            /** Durability */
            durability: number;
            /** Compatible With */
            compatible_with: string[];
            /** Effects */
            effects: Record<string, never>;
        };
        /** ToolOut */
        ToolOut: {
            /** Id */
            id: number;
            /** Common Name */
            common_name: string;
            /** Key */
            key: string;
            /** Description */
            description: string;
            /** Task Type */
            task_type: string;
            /** Efficiency */
            efficiency: number;
            /** Durability */
            durability: number;
            /** Compatible With */
            compatible_with: string[];
            /** Effects */
            effects: Record<string, never>;
        };
        /**
         * ToolUse
         * @description Schema para requisições de ações que envolvem ferramentas.
         *     Combina o nome da ação, o ID do terreno e a chave da ferramenta.
         */
        ToolUse: {
            /** Action Name */
            action_name: string;
            /** Terrain Id */
            terrain_id: number;
            /** Tool Key */
            tool_key?: string;
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
        /** WhatsappMessageIn */
        WhatsappMessageIn: {
            /** Phone Number */
            phone_number?: string;
            /** Message */
            message?: string;
            /** Command */
            command?: string;
            /** Terrain Id */
            terrain_id?: number;
            /** Tool Key */
            tool_key?: string;
        };
        /** WhatsappMessageOut */
        WhatsappMessageOut: {
            /** Reply */
            reply: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    whatsapp_message_endpoint_whatsapp_message_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["WhatsappMessageIn"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WhatsappMessageOut"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_players_players__get: {
        parameters: {
            query?: {
                skip?: number;
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PlayerOut"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_player_endpoint_players__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PlayerCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PlayerOut"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_player_endpoint_players__player_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                player_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PlayerOut"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_player_endpoint_players__player_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                player_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PlayerUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PlayerOut"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_player_endpoint_players__player_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                player_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_player_terrains_players__player_id__terrains_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                player_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TerrainOut"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_player_with_terrains_players__player_id__with_terrains_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                player_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PlayerWithTerrainsOut"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_terrains_terrains__get: {
        parameters: {
            query?: {
                skip?: number;
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TerrainOut"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_terrain_endpoint_terrains__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TerrainCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TerrainOut"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_terrain_endpoint_terrains__terrain_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                terrain_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TerrainOut"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_terrain_endpoint_terrains__terrain_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                terrain_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TerrainUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TerrainOut"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_terrain_endpoint_terrains__terrain_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                terrain_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_soil_health_endpoint_terrains__terrain_id__soil_health_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                terrain_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SoilHealthReport"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_terrain_params_with_health_terrains__terrain_id__parameters_with_health_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                terrain_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TerrainParametersWithHealthOut"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_badges_badges__get: {
        parameters: {
            query: {
                player_id: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadgeOut"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_badge_endpoint_badges__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BadgeCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadgeOut"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_climate_conditions_climate_conditions__get: {
        parameters: {
            query?: {
                skip?: number;
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ClimateConditionOut"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_climate_condition_endpoint_climate_conditions__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ClimateConditionCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ClimateConditionOut"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_shop_items_shop_items__get: {
        parameters: {
            query?: {
                skip?: number;
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ShopItemOut"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_shop_item_endpoint_shop_items__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ShopItemCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ShopItemOut"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_shop_item_endpoint_shop_items__item_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                item_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ShopItemOut"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_purchases_purchases__get: {
        parameters: {
            query?: {
                skip?: number;
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PurchaseOut"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_purchase_endpoint_purchases__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PurchaseCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PurchaseOut"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_purchase_endpoint_purchases__purchase_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                purchase_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PurchaseOut"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_shop_items_async_async_shop_items__get: {
        parameters: {
            query?: {
                skip?: number;
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ShopItemOut"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_shop_item_async_endpoint_async_shop_items__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ShopItemCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ShopItemOut"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_shop_item_async_endpoint_async_shop_items__item_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                item_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ShopItemOut"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_purchases_async_async_purchases__get: {
        parameters: {
            query?: {
                skip?: number;
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PurchaseOut"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_purchase_async_endpoint_async_purchases__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PurchaseCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PurchaseOut"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_purchase_async_endpoint_async_purchases__purchase_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                purchase_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PurchaseOut"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_terrains_async_async_terrains__get: {
        parameters: {
            query?: {
                skip?: number;
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TerrainOut"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_terrain_async_endpoint_async_terrains__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TerrainCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TerrainOut"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_terrain_async_endpoint_async_terrains__terrain_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                terrain_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TerrainOut"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_terrain_async_endpoint_async_terrains__terrain_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                terrain_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TerrainUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TerrainOut"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_terrain_async_endpoint_async_terrains__terrain_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                terrain_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_soil_health_async_endpoint_async_terrains__terrain_id__soil_health_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                terrain_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SoilHealthReport"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_terrain_params_with_health_async_async_terrains__terrain_id__parameters_with_health_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                terrain_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TerrainParametersWithHealthOut"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_players_endpoint_async_players__get: {
        parameters: {
            query?: {
                skip?: number;
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PlayerOut"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_player_endpoint_async_players__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PlayerCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PlayerOut"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_player_endpoint_async_players__player_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                player_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PlayerOut"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_player_endpoint_async_players__player_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                player_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PlayerUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PlayerOut"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_player_endpoint_async_players__player_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                player_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_player_terrains_async_players__player_id__terrains_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                player_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TerrainOut"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_player_with_terrains_async_players__player_id__with_terrains_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                player_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PlayerWithTerrainsOut"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_agents_async_async_agents__get: {
        parameters: {
            query: {
                terrain_id: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>[];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_climate_conditions_endpoint_async_climate_conditions__get: {
        parameters: {
            query?: {
                skip?: number;
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ClimateConditionOut"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_climate_condition_endpoint_async_climate_conditions__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ClimateConditionCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ClimateConditionOut"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_badges_endpoint_async_badges__get: {
        parameters: {
            query: {
                player_id: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadgeOut"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_badge_endpoint_async_badges__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BadgeCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadgeOut"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    chat_proxy_eko__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ChatRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ChatResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    clear_context_eko__conversation_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                conversation_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_plantings_plantings__get: {
        parameters: {
            query?: {
                player_id?: number;
                quadrant_id?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PlantingSchema"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_planting_endpoint_plantings__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PlantingCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PlantingSchema"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_planting_endpoint_plantings__planting_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                planting_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PlantingSchema"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_planting_endpoint_plantings__planting_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                planting_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PlantingUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PlantingSchema"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_planting_endpoint_plantings__planting_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                planting_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_species_species__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: components["schemas"]["SpeciesSchema"];
                    };
                };
            };
        };
    };
    list_tools_tools__get: {
        parameters: {
            query?: {
                skip?: number;
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ToolOut"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_tool_endpoint_tools__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ToolCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ToolOut"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_tool_endpoint_tools__tool_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                tool_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ToolOut"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_tool_endpoint_tools__tool_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                tool_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ToolCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ToolOut"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_tool_endpoint_tools__tool_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                tool_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    run_tick_admin_run_tick_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    perform_action_actions__post: {
        parameters: {
            query: {
                SessionLocal: unknown;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ToolUse"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    perform_action_async_async_actions__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ToolUse"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_quadrants_quadrants__get: {
        parameters: {
            query: {
                /** @description ID of the terrain to get quadrants for */
                terrain_id: number;
                skip?: number;
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["QuadrantOut"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_quadrant_endpoint_quadrants__quadrant_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                quadrant_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["QuadrantOut"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_quadrant_endpoint_quadrants__quadrant_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                quadrant_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["QuadrantUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["QuadrantOut"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_quadrant_endpoint_quadrants__quadrant_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                quadrant_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_quadrants_async_async_quadrants__get: {
        parameters: {
            query: {
                /** @description ID of the terrain to get quadrants for */
                terrain_id: number;
                skip?: number;
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["QuadrantOut"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_quadrant_async_endpoint_async_quadrants__quadrant_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                quadrant_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["QuadrantOut"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_quadrant_async_endpoint_async_quadrants__quadrant_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                quadrant_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["QuadrantUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["QuadrantOut"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_quadrant_async_endpoint_async_quadrants__quadrant_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                quadrant_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_plantings_async_async_plantings__get: {
        parameters: {
            query?: {
                player_id?: number;
                quadrant_id?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PlantingSchema"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_planting_async_endpoint_async_plantings__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PlantingCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PlantingSchema"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_planting_async_endpoint_async_plantings__planting_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                planting_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PlantingSchema"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_planting_async_endpoint_async_plantings__planting_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                planting_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PlantingUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PlantingSchema"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_planting_async_endpoint_async_plantings__planting_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                planting_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_inputs_endpoint_inputs__get: {
        parameters: {
            query?: {
                /** @description Filter inputs by planting ID */
                planting_id?: number;
                skip?: number;
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InputOut"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_input_endpoint_inputs__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["InputCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InputWithEffectsOut"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_input_endpoint_inputs__input_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                input_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InputOut"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_input_endpoint_inputs__input_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                input_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_inputs_endpoint_async_inputs__get: {
        parameters: {
            query?: {
                /** @description Filter inputs by planting ID */
                planting_id?: number;
                skip?: number;
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InputOut"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_input_endpoint_async_inputs__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["InputCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InputWithEffectsOut"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_input_endpoint_async_inputs__input_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                input_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InputOut"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_input_endpoint_async_inputs__input_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                input_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    root__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
}
