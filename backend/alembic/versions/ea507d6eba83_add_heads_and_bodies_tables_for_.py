"""Add heads and bodies tables for character customization

Revision ID: ea507d6eba83
Revises: 0001_add_performance_indexes
Create Date: 2025-05-19 07:52:09.620600

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'ea507d6eba83'
down_revision = '0001_add_performance_indexes'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    conn = op.get_bind()
    inspector = sa.inspect(conn)
    
    # Verificar se a tabela 'inputs' existe antes de tentar remover índices e a própria tabela
    if 'inputs' in inspector.get_table_names():
        # Verificar e remover índices apenas se existirem
        indices = inspector.get_indexes('inputs')
        index_names = [idx['name'] for idx in indices]
        
        if 'ix_inputs_id' in index_names:
            op.drop_index('ix_inputs_id', table_name='inputs')
        
        if 'ix_inputs_planting_id' in index_names:
            op.drop_index('ix_inputs_planting_id', table_name='inputs')
        
        # Remover a tabela 'inputs'
        op.drop_table('inputs')
    
    # Verificar se a tabela 'plantings' existe antes de adicionar restrições
    if 'plantings' in inspector.get_table_names():
        # Adicionar restrição única apenas se a tabela existir
        op.create_unique_constraint('uix_quadrant_slot', 'plantings', ['quadrant_id', 'slot_index'])
    
    # Verificar se a tabela 'tools' existe antes de adicionar colunas
    if 'tools' in inspector.get_table_names():
        # Adicionar colunas apenas se a tabela existir
        columns = [col['name'] for col in inspector.get_columns('tools')]
        
        if 'image_url' not in columns:
            op.add_column('tools', sa.Column('image_url', sa.String(length=255), nullable=True))
        
        if 'created_at' not in columns:
            op.add_column('tools', sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True))
        
        if 'updated_at' not in columns:
            op.add_column('tools', sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True))
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('tools', 'updated_at')
    op.drop_column('tools', 'created_at')
    op.drop_column('tools', 'image_url')
    op.drop_constraint('uix_quadrant_slot', 'plantings', type_='unique')
    op.create_table('inputs',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('planting_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('type', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('quantity', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('applied_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['planting_id'], ['plantings.id'], name='inputs_planting_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='inputs_pkey')
    )
    op.create_index('ix_inputs_planting_id', 'inputs', ['planting_id'], unique=False)
    op.create_index('ix_inputs_id', 'inputs', ['id'], unique=False)
    # ### end Alembic commands ###
